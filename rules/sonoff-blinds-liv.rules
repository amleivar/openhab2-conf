import org.openhab.core.library.types.DecimalType
import java.util.concurrent.locks.ReentrantLock
import java.lang.Math

val ReentrantLock lock  = new ReentrantLock()

// 22700ms seconds is time to go from down to up (NOT FULL)
var Number SHUTTER_ONE_PERCENT_MS = 227
var Number SHUTTER_FULL_MS = 26000

rule "Shutter Control Rule"
when
    Item shutterLiv received command 
then
    lock.lock()
    try {
        var Number curr = receivedCommand as DecimalType
        var Number old = shutterLiv.previousState(true).state as DecimalType
        logInfo("sonoff-blinds-liv", "Curr:" + curr + " Old:" + old)
        
        var Number workMs = Math::abs((curr-old).longValue) * SHUTTER_ONE_PERCENT_MS;
        if(curr == 0 || curr == 100)
        {
            workMs += 4000; // 4seconds offset to fix possible deviations
        }
        // Offset from 0 -> 4000 more
        if(old == 0)
        {
            workMs += SHUTTER_FULL_MS - (SHUTTER_ONE_PERCENT_MS*100);
        }
        logInfo("sonoff-blinds-liv", "workMs:" + workMs)
        
        if(curr > old) // UP
        {
            sendCommand(blindsLivUp, ON)
            Thread::sleep(workMs.longValue)
            sendCommand(blindsLivUp, OFF)
        }
        else // DOWN
        {
            sendCommand(blindsLivDw, ON)
            Thread::sleep(workMs.longValue)
            sendCommand(blindsLivDw, OFF)
        }
        
    } finally {
        lock.unlock()
    }
end
